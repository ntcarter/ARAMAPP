1) use RIOT API to call each match ID to get a Win/loss.
2) Count all Wins and total number of games.
3) Display win% next to champion name.
4) Store raw data into a file (Match ID: [championID, win/loss], next entry.
5) Have the file update without needing to overwrite (new games are written to the end of the file without overwriting any old data.)
    Look for the most recent game. Make an API call. Look for that game in the JSON from RIOT. If that game exists and is the first game do nothing
            If the game exists take all more recent games and append them to the end of the file making sure the most recent games are lower in the file with the most recent being last.
              If the game doesn't exist add all games to the file and make another call.
6) Use the file to calculate new WIN/LOSS.
7)Save old win/loss for each champion to a file.
8) When app is started display old win rate on file. (so you don't have to wait a long time to see data).
?) Use javaFX to create a GUI.
9) As we make API calls update the Win rate. (Need a UI that refreshes for this)(Could get away with re-printing all win rates after every 20 or 30 API calls)
10) Find all the dates of all the patches that are still relevant for our data.
11) allow win rates to be sorted/filtered by patch.
12) Graphs and UI to show how winrate changed overTime?
13) Port to python?

more RIOT project ideas)
1) Summoner tracker. UI that shows all the summomer spells for a each enemy champion. Takes into account runes. Click on a summoner to put it on cooldown
